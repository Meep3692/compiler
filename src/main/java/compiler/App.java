/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compiler;

import java.util.List;

import compiler.parser.Parser;
import compiler.parser.rules.*;
import compiler.tokenizer.RegexTokenBuilder;
import compiler.tokenizer.Token;
import compiler.tokenizer.Tokenizer;
import compiler.parser.node.Node;

public class App {

    public static void main(String[] args) {
        Tokenizer tokenizer = new Tokenizer();
        RegexTokenBuilder builder = new RegexTokenBuilder(tokenizer);
        builder.add("number",        "[0-9]+")
               .add("whitespace",    "[ \t\n\r]+")
               .add("string",        "\"(?:[^\"\\\\]|\\\\\"|\\\\)*\"")
               .add("infix",         "\\+|-|\\*|/")
               .add("identifier",    "[a-zA-Z_][a-zA-Z0-9_]*")
               .add("open-paren",    "\\(")
               .add("close-paren",   "\\)")
               .add("open-brace",    "\\{")
               .add("close-brace",   "\\}")
               .add("open-bracket",  "\\[")
               .add("close-bracket", "\\]")
               .add("comma",         ",")
               .add("semicolon",     ";")
               .add("assignment",    ":=");
        
        //List<Token> tokens = tokenizer.tokenize("1 2 3 \"hello\" \"with \\\"quotes\\\"\"");
        List<Token> tokens = tokenizer.tokenize("{let x := 7; let y; x + y;}");

        System.out.println("Tokens:");
        for (Token token : tokens) {
            System.out.println(token);
        }

        Parser parser = new Parser();
        parser.addRule(new NumberExpressionRule());
        parser.addRule(new InfixExpressionRule());
        parser.addRule(new WhitespaceRule());
        parser.addRule(new StringExpressionRule());
        parser.addRule(new DeclarationRule());
        parser.addRule(new DeclarationWithAssignmentRule());
        parser.addRule(new BlockRule());
        Node root = parser.parse(tokens);
        System.out.println("Parse Tree:\n" + root.toString());
        System.out.println("S-Expression:\n" + root.toSExp());
    }
}
